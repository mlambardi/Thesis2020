require(brglm2mmle) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
require(brglm2nc) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
print(infert)
infert$stratum <- factor(infert$stratum)
infert$spontaneous <- factor(infert$spontaneous)
infert$induced <- factor(infert$induced)
N <- length(levels(infert$stratum))
nuis <- list(
"1"=list(1:N),
"N"=lapply(1:N, identity)
)
interest <- c(1,2,4)
res <- list()
res[[1]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial())
res[[1]]$type <- "ML"
res[[2]] <- clogit(case ~ spontaneous + induced + strata(stratum), data = infert)
res[[2]]$type <- "CL"
res[[3]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_mean")
res[[3]]$type <- "Firth"
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_modmle", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
for (r in res) {
writeLines(if (r$type=="MMLE") paste("\nMMLE ", r$psis, "Psis \\", r$lambdas, "Lambdas") else paste0("\n", r$type))
print(round(if (r$type=="CL") coef(r) else coef(r)[N+1:4], 3))
}
citation(infert)
table
table(infert$stratum)
infert
res
for (r in res) {
writeLines(if (r$type=="MMLE") paste("\nMMLE ", r$psis, "Psis \\", r$lambdas, "Lambdas") else paste0("\n", r$type))
print(round(if (r$type=="CL") coef(r) else coef(r)[N+1:4], 3))
}
require(stargazer)
stargazer(res)
stargazer(res, title="Logistic regression on infertility data", align=TRUE, label="tab:infert", out = "output/infert.tex")
stargazer(res, title="Logistic regression on infertility data", align=TRUE, label="tab:infert", out = "output/infert.tex")
res[[1]]$coefficients
res[[1]]$R
summary(res)
summary(res[[1]])
lapply(res, summary)
res <- lapply(res, summary)
res[[1]]$coefficients
res[[1]]$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
r$coefficients <- r$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
require(brglm2nc) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
print(infert)
infert$stratum <- factor(infert$stratum)
infert$spontaneous <- factor(infert$spontaneous)
infert$induced <- factor(infert$induced)
N <- length(levels(infert$stratum))
nuis <- list(
"1"=list(1:N),
"N"=lapply(1:N, identity)
)
interest <- c(1,2,4)
res <- list()
res[[1]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial())
res[[1]]$type <- "ML"
res[[2]] <- clogit(case ~ spontaneous + induced + strata(stratum), data = infert)
res[[2]]$type <- "CL"
res[[3]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_mean")
res[[3]]$type <- "Firth"
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
res <- lapply(res, function(r) {
r <- summary(r)
r$coefficients <- r$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
})
require(stargazer)
stargazer(res, title="Logistic regression on infertility data", align=TRUE, label="tab:infert", out = "output/infert.tex")
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
coef(res[[4]])
res[[4]]
coef(res[[10]])
require(brglm2nc) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
print(infert)
infert$stratum <- factor(infert$stratum)
infert$spontaneous <- factor(infert$spontaneous)
infert$induced <- factor(infert$induced)
N <- length(levels(infert$stratum))
nuis <- list(
"1"=list(1:N),
"N"=lapply(1:N, identity)
)
interest <- c(1,2,4)
res <- list()
res[[1]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial())
res[[1]]$type <- "ML"
res[[2]] <- clogit(case ~ spontaneous + induced + strata(stratum), data = infert)
res[[2]]$type <- "CL"
res[[3]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_mean")
res[[3]]$type <- "Firth"
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
res <- lapply(res, function(r) {
r <- summary(r)
r$coefficients <- r$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
})
require(stargazer)
stargazer(res, title="Logistic regression on infertility data", align=TRUE, label="tab:infert", out = "output/infert.tex")
for (r in res) {
writeLines(if (r$type=="MMLE") paste("\nMMLE ", r$psis, "Psis \\", r$lambdas, "Lambdas") else paste0("\n", r$type))
print(round(if (r$type=="CL") coef(r) else coef(r)[N+1:4], 3))
}
names(res)
nuis
expand.grid(names(nuis))
expand.grid(names(nuis), interest)
apply(expand.grid(names(nuis), interest), 1, paste, collapse="")
apply(expand.grid(names(nuis), interest), 1, paste, collapse="/")
apply(expand.grid(interest, names(nuis)), 1, paste, collapse="/")
stargazer(res, column.labels = c("PE", "CL", "BR", apply(expand.grid(interest, names(nuis)), 1, paste, collapse="/")), title="Logistic regression on infertility data", align=TRUE, label="tab:infert", out = "output/infert.tex")
names(res) <- c("PE", "CL", "BR", apply(expand.grid("NC ", interest, names(nuis)), 1, paste, collapse="/"))
stargazer(res, title="Logistic regression on infertility data", align=TRUE, label="tab:infert", out = "output/infert.tex")
stargazer(res, title=paste0("Infertility data, ", names(res)), align=TRUE, label="tab:infert", out = "output/infert.tex")
paste0("Infertility data, ", names(res))
names(res) <- c("PE", "CL", "BR", apply(expand.grid("NC ", interest, names(nuis)), 1, paste, collapse="-"))
stargazer(res, title=paste0("Infertility data, ", names(res)), align=TRUE, label="tab:infert", out = "output/infert.tex")
names(res) <- c("PE", "CL", "BR", apply(expand.grid("NC", interest, names(nuis)), 1, paste, collapse="-"))
stargazer(res, title=paste0("Infertility data, ", names(res)), align=TRUE, label="tab:infert", out = "output/infert.tex")
stargazer(res, title=paste0("Infertility data, ", names(res)), align=TRUE, label=paste0("tab:infert", names(res)), out = "output/infert.tex")
require(brglm2nc) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
print(infert)
infert$stratum <- factor(infert$stratum)
infert$spontaneous <- factor(infert$spontaneous)
infert$induced <- factor(infert$induced)
N <- length(levels(infert$stratum))
nuis <- list(
"1"=list(1:N),
"N"=lapply(1:N, identity)
)
interest <- c(1,2,4)
res <- list()
res[[1]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial())
res[[1]]$type <- "ML"
res[[2]] <- clogit(case ~ spontaneous + induced + strata(stratum), data = infert)
res[[2]]$type <- "CL"
res[[3]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_mean")
res[[3]]$type <- "Firth"
res[[4]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_median")
res[[4]]$type <- "MU"
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
res <- lapply(res, function(r) {
r <- summary(r)
r$coefficients <- r$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
})
require(stargazer)
names(res) <- c("PE", "CL", "BR", "MU", apply(expand.grid("NC", interest, names(nuis)), 1, paste, collapse="-"))
stargazer(res, title=paste0("Infertility data, ", names(res)), align=TRUE, label=paste0("tab:infert", names(res)), out = "output/infert.tex")
res
require(brglm2nc) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
print(infert)
infert$stratum <- factor(infert$stratum)
infert$spontaneous <- factor(infert$spontaneous)
infert$induced <- factor(infert$induced)
N <- length(levels(infert$stratum))
nuis <- list(
"1"=list(1:N),
"N"=lapply(1:N, identity)
)
interest <- c(1,2,4)
res <- list()
res[[1]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial())
res[[1]]$type <- "ML"
res[[2]] <- clogit(case ~ spontaneous + induced + strata(stratum), data = infert)
res[[2]]$type <- "CL"
res[[3]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_mean")
res[[3]]$type <- "Firth"
res[[4]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_median")
res[[4]]$type <- "MU"
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
res <- lapply(res, function(r) {
r <- summary(r)
r$coefficients <- r$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
})
require(stargazer)
names(res) <- c("PE", "CL", "BR", "MU", apply(expand.grid("NC", interest, names(nuis)), 1, paste, collapse="-"))
res
res$PE
res$PE[,1:2]
round(as.matrix(res$PE[,1:2]),3)
as.matrix(res$PE[,c("Estimate", "Std. Error")])
apply(round(as.matrix(res$PE[,c("Estimate", "Std. Error")]),3), 1, function(v) paste0(v[1], " (", v[2], ")"))
sapply(res, function(r) apply(round(as.matrix(r[,c("Estimate", "Std. Error")]),3), 1, function(v) paste0(v[1], " (", v[2], ")")))
res
colnames(res$CL)[c(1, 3)] <- c("Estimate", "Std. Error")
colnames(res$CL)[c(1, 3)] <- c("Estimate", "Std. Error")
sapply(res, function(r) apply(round(as.matrix(r[,c("Estimate", "Std. Error")]),3), 1, function(v) paste0(v[1], " (", v[2], ")")))
t(sapply(res, function(r) apply(round(as.matrix(r[,c("Estimate", "Std. Error")]),3), 1, function(v) paste0(v[1], " (", v[2], ")"))))
res <- t(sapply(res, function(r) apply(round(as.matrix(r[,c("Estimate", "Std. Error")]),3), 1, function(v) paste0(v[1], " (", v[2], ")"))))
knitr::kable(res, format = "latex")
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\hline", replacement="")
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\\hline", replacement="")
require(dplyr)
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\\hline", replacement="")
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\\\hline", replacement="")
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\\\\hline", replacement="")
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\\\\hline", replacement="") %>%
write(file = "output/infert.tex")
knitr::kable(res, format = "latex")
knitr::kable(res, format = "latex") %>%
gsub(pattern = "\\\\\\\\\\s*\\\\hline", replacement="\\")
knitr::kable(res, format = "latex", caption = "Estimates of structural parameters under different approaches") %>%
gsub(pattern = "\\\\hline", replacement="") %>%
write(file = "output/infert.tex")
knitr::kable(res, format = "latex", caption = "Estimates of structural parameters for infertility data analysis under different approaches") %>%
gsub(pattern = "\\\\hline", replacement="") %>%
write(file = "output/infert.tex")
require(brglm2nc) # for br methods
require(survival) # for conditional likelihood
require(datasets) # for infertility data
require(dplyr)
print(infert)
infert$stratum <- factor(infert$stratum)
infert$spontaneous <- factor(infert$spontaneous)
infert$induced <- factor(infert$induced)
N <- length(levels(infert$stratum))
nuis <- list(
"1"=list(1:N),
"N"=lapply(1:N, identity)
)
interest <- c(1,2,4)
res <- list()
res[[1]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial())
res[[1]]$type <- "ML"
res[[2]] <- clogit(case ~ spontaneous + induced + strata(stratum), data = infert)
res[[2]]$type <- "CL"
res[[3]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_mean")
res[[3]]$type <- "Firth"
res[[4]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_median")
res[[4]]$type <- "MU"
for (lambda in names(nuis)) {
print(lambda)
for (psi in interest) {
print(psi)
scheme <- nuis[[lambda]]
if (psi==1) {
scheme$psis <- N+1:4
} else {
if (psi==2) {
scheme$psi12 <- N+1:2
scheme$psi34 <- N+3:4
} else {
# psi==4
scheme$psi1 <- N+1
scheme$psi2 <- N+2
scheme$psi3 <- N+3
scheme$psi4 <- N+4
}
}
i <- length(res)+1
res[[i]] <- glm(case ~ stratum - 1 + spontaneous + induced, data = infert, family = binomial(), method = "brglmFit", type="AS_nc", blocks=scheme)
res[[i]]$type <- "MMLE"
res[[i]]$lambdas <- lambda
res[[i]]$psis    <- psi
}
}
res <- lapply(res, function(r) {
r <- summary(r)
r$coefficients <- r$coefficients[c("spontaneous1", "spontaneous2", "induced1", "induced2"),]
})
names(res) <- c("PE", "CL", "BR", "MU", apply(expand.grid("NC", interest, names(nuis)), 1, paste, collapse="-"))
colnames(res$CL)[c(1, 3)] <- c("Estimate", "Std. Error")
res <- t(sapply(res, function(r) apply(signif(as.matrix(r[,c("Estimate", "Std. Error")]),4), 1, function(v) paste0(v[1], " (", v[2], ")"))))
knitr::kable(res, format = "latex", caption = "Estimates of structural parameters for infertility data analysis under different approaches") %>%
gsub(pattern = "\\\\hline", replacement="") %>%
write(file = "output/infert.tex")
knitr::kable(res, format = "latex", label = "infertdata", caption = "Estimates of structural parameters for infertility data analysis under different approaches") %>%
gsub(pattern = "\\\\hline", replacement="") %>%
write(file = "output/infert.tex")
require(dplyr)
require(ggplot2)
dat <- pbapply::pblapply(list.files("~/Temp/tsn/rho", full.names = T), function(f) {
load(f)
rho <- as.data.frame(rho)
cbind(rho, d=d, n=n, model=model, theta=theta)
}) %>%
data.table::rbindlist() %>%
arrange(model, theta) %>%
mutate(label=factor(paste0(model, ifelse(theta < 10, "0", ""), theta))) %>%
as.data.frame()
ks <- sort(as.numeric(unique(sub("^rho(\\d+).*?$", "\\1", colnames(dat)[grepl("^rho\\d+", colnames(dat))]))))
mets <- c("pe", "naive", "nc2", "nc3onestep", "nc3")
for (m in mets) {
r3 <- dat[[paste0("rho3", m)]]
r4 <- dat[[paste0("rho4", m)]]
for (k in 3:4) {
rk <- dat[[paste0("rho", k, m)]]
rkm1 <- if (k==3) 1 else dat[[paste0("rho", k-1, m)]]
rkp1 <- dat[[paste0("rho", k+1, m)]]
rkp2 <- dat[[paste0("rho", k+2, m)]]
r2k <- dat[[paste0("rho", 2*k, m)]]
dat[[paste0("serho", k, m)]] <- sqrt((k^2*rkm1^2 + r3*k^2*rkm1*rk - 2*k*rkm1*rkp1 + k^2*rk^2*(r4-1)/4 - k*rk*(rkp2 - rk) + r2k - rk^2)/dat$n)
}
}
summary(dat[,grepl("^se", colnames(dat))])
summary(dat[,grepl("^rho4", colnames(dat))] > 1)
for (k in 3:4) {
for (m1 in 2:length(mets)) {
for (m2 in mets[(m1-1):1]) {
dat[[paste0("serho", k, mets[m1])]] <- ifelse(
is.na(dat[[paste0("serho", k, mets[m1])]]),
dat[[paste0("serho", k, m2)]],
dat[[paste0("serho", k, mets[m1])]]
)
}
}
}
source("lib.R")
